// Code generated by mockery. DO NOT EDIT.

package redis_mock

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// SessionStore is an autogenerated mock type for the SessionStore type
type SessionStore struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: c, id
func (_m *SessionStore) DeleteSession(c *gin.Context, id string) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSession provides a mock function with given fields: c, cookieKey
func (_m *SessionStore) GetSession(c *gin.Context, cookieKey string) (string, error) {
	ret := _m.Called(c, cookieKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (string, error)); ok {
		return rf(c, cookieKey)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) string); ok {
		r0 = rf(c, cookieKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(c, cookieKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSession provides a mock function with given fields: c, cookieKey, redisValue
func (_m *SessionStore) NewSession(c *gin.Context, cookieKey string, redisValue string) error {
	ret := _m.Called(c, cookieKey, redisValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string) error); ok {
		r0 = rf(c, cookieKey, redisValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSession provides a mock function with given fields: c, ChangeId, oldId
func (_m *SessionStore) UpdateSession(c *gin.Context, ChangeId string, oldId string) error {
	ret := _m.Called(c, ChangeId, oldId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string) error); ok {
		r0 = rf(c, ChangeId, oldId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSessionStore creates a new instance of SessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionStore {
	mock := &SessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
